{
  pkgs,
  PRIMARY_USER,
  NIXOS_TEST_VM,
  ...
}:

{
  # 1. BOOTLOADER AND EFI
  # Use Systemd Boot for a faster, simpler EFI experience
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  # 2. FILE SYSTEMS
  fileSystems."/" = {
    # The root filesystem is the LUKS mapping device.
    device = "/dev/mapper/NIXROOT";
    fsType = "ext4";
  };

  # The boot partition is mounted at /boot.
  # Note: The actual UUIDs for / and /boot are usually imported from hardware-configuration.nix,
  # but using the label/mapper is often sufficient for the custom install scenario.
  fileSystems."/boot" = {
    device = "/dev/disk/by-label/NIXBOOT";
    fsType = "vfat";
  };

  # 3. ENCRYPTION AND INITIAL RAM DISK (INITRD)
  boot.initrd.luks.enable = true;
  boot.initrd.systemd.enable = true; # Necessary for tpm2-luks service

  # 4. TPM 2.0 INTEGRATION (REQUIRES UUID REPLACEMENT)
  environment.systemPackages = [ pkgs.tpm2-luks ];
  boot.initrd.extraSystemdUnits = [ "tpm2-luks.service" ];

  # This is the line the bash script will replace:
  boot.initrd.luks.devices.NIXROOT.device = "/dev/disk/by-uuid/LUKS_UUID_PLACEHOLDER_HERE";
  boot.initrd.luks.devices.NIXROOT.tpm2 = {
    enable = true;
    slot = 1;
  };

  networking.hostName = NIXOS_TEST_VM;

  # IMPORTANT: The hardware-configuration.nix generated by nixos-generate-config must be
  # imported into this file or your flake structure to provide missing details like kernel modules.
  imports = [
    ./hardware-configuration.nix
  ];
}
